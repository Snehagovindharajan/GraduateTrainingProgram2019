create table author(author_id varchar(10),author_name varchar(30),author_country varchar(30),author_city varchar(30),publish_id varchar(10));

insert into author values('AUT001','William Norton','UK','Cambridge','PB01');
insert into author values('AUT002','C. J. Wilde ','USA','San Francisco','PB04');
insert into author values('AUT003','John Betjeman Hunter','RUSSIA','Moscow','PB01');
insert into author values('AUT004','John Betjeman Hunter','CANADA','Toronto','PB03');
insert into author values('AUT005','S.B.Swaminathan','INDIA','Delhi','PB01');
insert into author values('AUT006','Butler Andre','UK','London','PB03');
insert into author values('AUT007','E. Howard','EUROPE','Berlin','PB03');
insert into author values('AUT008','Andrew Jeff','GERMANY','Berlin','PB02');
insert into author values('AUT009','Drek Tailor','Australia','Melbourne','PB01');
insert into author values('AUT010','Mary Coffing','USA','New Jersy','PB04');


create table publish(publish_id varchar(10),publish_name varchar(30),publish_city varchar(30),publish_start_date date,branches integer);

insert into publish values('PB01','Jex Max Publication','BERLIN','1929-04-21',10);
insert into publish values('PB02','Summer Night Publication','CANADA','2019-08-31',25);
insert into publish values('PB03','Novel Publisher Ltd','LONDON','2018-08-10',11);
insert into publish values('PB04','Mark Book Sales','NEW JERSY','2008-05-24',9);

create table trip ( trip_id varchar(10),trip_source varchar(10),trip_dest varchar(10),trip_start_time time,trip_end_time time, trip_cost integer,dynamic_fare varchar(5));

insert into trip values('TP01','CHN','BGL','13:40','15:40',3500,'Y');
insert into trip values('TP02','BGL','MUM','18:20','19:20',6700,'Y');
insert into trip values('TP03','CHN','HYD','9:45','11:10',3000,'Y');
insert into trip values('TP04','HYD','BGL','12:20','13:25',2700,'N');
insert into trip values('TP05','MUM','NDL','23:00','1:25',4500,'Y');
insert into trip values('TP06','BGL','NDL','19:40','22:10',5000,'N');
insert into trip values('TP07','NDL','MUM','16:45','17:50',6000,'Y');
insert into trip values('TP08','MUM','BGL','20:20','23:45',5000,'N');
insert into trip values('TP09','NDL','HYD','11:25','13:45',3000,'N');
insert into trip values('TP10','HYD','CHN','20:30','22:20',4500,'Y');
insert into trip values('TP11','BGL','CHN','23:45','1:05',3900,'Y');

create table stats (stats_id integer,month integer,year integer,temp_fare float,rain_inch float);

insert into stats values(13,1,2010,57.4,0.31);
insert into stats values(13,5,2010,91.7,5.15);
insert into stats values(13,12,2010,12.6,8.34);
insert into stats values(13,9,2010,100.3,10.34);
insert into stats values(44,9,2010,27.2,3.45);
insert into stats values(44,2,2010,27.3,0.18);
insert into stats values(44,6,2010,74.8,2.11);
insert into stats values(66,3,2010,6.7,2.1);
insert into stats values(66,7,2010,65.8,4.52);

create table station (station_id integer,city varchar(10),state varchar(10),lat_n integer,long_w integer);

insert into station values(13,'Phoenix','AZ',33,112);
insert into station values(44,'Denver','CO',40,105);
insert into station values(66,'Caribou','ME',47,68);

SET - 1

1)Fetch publisher information who have publish_city <> author_city and check if publish_city = author_country . display the correct publisher_city along with other publisher information based on author_city

mysql> select a.author_name,a.author_city,p.publish_name,p.publish_city,p.publish_start_date,p.branches from author a join publish p on a.publish_id = p.publish_id where a.author_city != p.publish_city and a.author_country=p.publish_city;
Empty set (0.00 sec)

2)Fetch authors_name, author_country, publish_city, publish_start_date, branches who have publications with most number of branches by century

mysql> select publish_id,author_name,author_country,publish_city,publish_start_date,branches from (select publish_id,author_name,author_country,publish_city,publish_start_date,branches,date,dense_rank() over(partition by date order by branches desc) as rank1 from(select a.publish_id,a.author_name,a.author_country,p.publish_city,p.publish_start_date ,p.branches, case when p.publish_start_date then round(date_format(p.publish_start_date,'%Y')/100) end as date from publish p join author a on p.publish_id=a.publish_id) as max_branch) as branches where rank1=1;
+------------+----------------------+----------------+--------------+--------------------+----------+
| publish_id | author_name          | author_country | publish_city | publish_start_date | branches |
+------------+----------------------+----------------+--------------+--------------------+----------+
| PB01       | William Norton       | UK             | BERLIN       | 1929-04-21         |       10 |
| PB01       | John Betjeman Hunter | RUSSIA         | BERLIN       | 1929-04-21         |       10 |
| PB01       | S.B.Swaminathan      | INDIA          | BERLIN       | 1929-04-21         |       10 |
| PB01       | Drek Tailor          | Australia      | BERLIN       | 1929-04-21         |       10 |
| PB02       | Andrew Jeff          | GERMANY        | CANADA       | 2019-08-31         |       25 |
+------------+----------------------+----------------+--------------+--------------------+----------+
5 rows in set (0.02 sec)

3)Fetch publisher details who have authors in same city and get corresponding author details who belong to same country

mysql> select a1.author_id,a1.author_name,p1.publish_id,p1.publish_name,p1.publish_city from publish p left join author a on a.publish_id=p.publish_id  left join author a1 on a1.author_country=a.author_country join publish p1 on a1.publish_id=p1.publish_id where p.publish_city=a.author_city;
+-----------+----------------+------------+---------------------+--------------+
| author_id | author_name    | publish_id | publish_name        | publish_city |
+-----------+----------------+------------+---------------------+--------------+
| AUT001    | William Norton | PB01       | Jex Max Publication | BERLIN       |
| AUT006    | Butler Andre   | PB03       | Novel Publisher Ltd | LONDON       |
| AUT002    | C. J. Wilde    | PB04       | Mark Book Sales     | NEW JERSY    |
| AUT010    | Mary Coffing   | PB04       | Mark Book Sales     | NEW JERSY    |
+-----------+----------------+------------+---------------------+--------------+
4 rows in set (0.00 sec)

4)Fetch authors who have incorrect author_country for same author_city. Display correct author_country along with all author_information



5)Fetch authors who do not have publisher from their country

mysql> select a1.author_id,a1.author_name,a1.author_country,a1.author_city,p1.publish_id,p1.publish_name,p1.publish_city from author a join publish p on a.publish_id=p.publish_id and a.author_city = p.publish_city right join author a1 on a.author_country=a1.author_country join publish p1 on a1.publish_id=p1.publish_id where p.publish_id is null;
+-----------+----------------------+----------------+-------------+------------+--------------------------+--------------+
| author_id | author_name          | author_country | author_city | publish_id | publish_name             | publish_city |
+-----------+----------------------+----------------+-------------+------------+--------------------------+--------------+
| AUT003    | John Betjeman Hunter | RUSSIA         | Moscow      | PB01       | Jex Max Publication      | BERLIN       |
| AUT004    | John Betjeman Hunter | CANADA         | Toronto     | PB03       | Novel Publisher Ltd      | LONDON       |
| AUT005    | S.B.Swaminathan      | INDIA          | Delhi       | PB01       | Jex Max Publication      | BERLIN       |
| AUT007    | E. Howard            | EUROPE         | Berlin      | PB03       | Novel Publisher Ltd      | LONDON       |
| AUT008    | Andrew Jeff          | GERMANY        | Berlin      | PB02       | Summer Night Publication | CANADA       |
| AUT009    | Drek Tailor          | Australia      | Melbourne   | PB01       | Jex Max Publication      | BERLIN       |
+-----------+----------------------+----------------+-------------+------------+--------------------------+--------------+
6 rows in set (0.00 sec)

6)Fetch author details if first character of publisher name is same as author_name

mysql> select author_name,publish_name from author a join publish p on a.publish_id=p.publish_id where substring(author_name,1,1)=substring(publish_name,1,1);
+----------------------+---------------------+
| author_name          | publish_name        |
+----------------------+---------------------+
| John Betjeman Hunter | Jex Max Publication |
| Mary Coffing         | Mark Book Sales     |
+----------------------+---------------------+
2 rows in set (0.00 sec)

7)Fetch author details who have more than one initial before their name

mysql> select author_name from author where locate('.',author_name,locate('.',author_name)+1) > 2;
+-----------------+
| author_name     |
+-----------------+
| C. J. Wilde     |
| S.B.Swaminathan |
+-----------------+
2 rows in set (0.00 sec)

8)Fetch author details who do not have initial in their name

mysql> select author_name from author where locate('.',author_name)=0;
+----------------------+
| author_name          |
+----------------------+
| William Norton       |
| John Betjeman Hunter |
| John Betjeman Hunter |
| Butler Andre         |
| Andrew Jeff          |
| Drek Tailor          |
| Mary Coffing         |
+----------------------+
7 rows in set (0.00 sec)

9)Fetch author details who have lower case in author_name
10)Fetch author information and publisher information who have publisher with recent publish_start_date.

mysql> select p.publish_name,p.publish_city,p.publish_start_date,a.author_id,a.author_name,a.author_country,a.author_city from publish p join author a on p.publish_id=a.publish_id where date_format(current_date,'%Y')=date_format(publish_start_date,'%Y') order by p.publish_name;
+--------------------------+--------------+--------------------+-----------+-------------+----------------+-------------+
| publish_name             | publish_city | publish_start_date | author_id | author_name | author_country | author_city |
+--------------------------+--------------+--------------------+-----------+-------------+----------------+-------------+
| Summer Night Publication | CANADA       | 2019-08-31         | AUT008    | Andrew Jeff | GERMANY        | Berlin      |
+--------------------------+--------------+--------------------+-----------+-------------+----------------+-------------+
1 row in set (0.00 sec)


11)Fetch count of authors belong to same continent(eg. Berlin -> Europe)

mysql> select author_country,author_city,continent,count(continent) over(partition by continent) from (select author_country,author_city,case when author_country in ('UK','GERMANY','EUROPE') then "EUROPE" when author_country in ('RUSSIA','INDIA') then "ASIA" when author_country in ('USA','CANADA') then "USA" when author_country in ('Australia') then "AUSTRALIA" end as continent  from author a join publish p on a.publish_id = p.publish_id) as count_author;
+----------------+---------------+-----------+-----------------------------------------------+
| author_country | author_city   | continent | count(continent) over(partition by continent) |
+----------------+---------------+-----------+-----------------------------------------------+
| RUSSIA         | Moscow        | ASIA      |                                             2 |
| INDIA          | Delhi         | ASIA      |                                             2 |
| Australia      | Melbourne     | AUSTRALIA |                                             1 |
| UK             | Cambridge     | EUROPE    |                                             4 |
| UK             | London        | EUROPE    |                                             4 |
| EUROPE         | Berlin        | EUROPE    |                                             4 |
| GERMANY        | Berlin        | EUROPE    |                                             4 |
| USA            | San Francisco | USA       |                                             3 |
| CANADA         | Toronto       | USA       |                                             3 |
| USA            | New Jersy     | USA       |                                             3 |
+----------------+---------------+-----------+-----------------------------------------------+
10 rows in set (0.00 sec)

mysql> select continent,count(continent) from (select author_country,case when author_country in ('UK','GERMANY','EUROPE') then "EUROPE" when author_country in ('RUSSIA','INDIA') then "ASIA" when author_country in ('USA','CANADA') then "USA" when author_country in ('Australia') then "AUSTRALIA" end as continent  from author a join publish p on a.publish_id = p.publish_id) as count_author group by continent;
+-----------+------------------+
| continent | count(continent) |
+-----------+------------------+
| EUROPE    |                4 |
| USA       |                3 |
| ASIA      |                2 |
| AUSTRALIA |                1 |
+-----------+------------------+
4 rows in set (0.00 sec)

SET - 2

1)Fetch itinerary details from CHN to NDL which are cheaper

mysql> select source,td1,ts2,td2,ts3,destination,cost from (select source,td1,ts2,td2,ts3,destination,cost,dense_rank() over(order by cost) as rank_cost from(select  t1.trip_source source,t1.trip_dest td1,t2.trip_source ts2,t2.trip_dest td2,t3.trip_source ts3,t3.trip_dest destination,t3.trip_cost+t2.trip_cost+t1.trip_cost as cost from trip t1 join trip t2 on t1.trip_dest=t2.trip_source join trip t3 on t2.trip_dest=t3.trip_source where t1.trip_source='CHN' and t3.trip_dest='NDL') as t) min_cost where rank_cost = 1;
+--------+------+------+------+------+-------------+-------+
| source | td1  | ts2  | td2  | ts3  | destination | cost  |
+--------+------+------+------+------+-------------+-------+
| CHN    | HYD  | HYD  | BGL  | BGL  | NDL         | 10700 |
+--------+------+------+------+------+-------------+-------+
1 row in set (0.00 sec)

2)Fetch itinerary details from CHN to NDL which have less travel time

		select source,td1,ts2,td2,ts3,destination,add_time from (
		select source,td1,ts2,td2,ts3,destination,add_time,dense_rank() over(partition by source,destination order by add_time) as rank_time from(
		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		addtime(addtime(abs(timediff(t1.trip_end_time,t1.trip_start_time)),abs(timediff(t2.trip_end_time,t2.trip_start_time))),abs(timediff					(t3.trip_end_time,t3.trip_start_time))) as add_time 
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL') 
		as time ) as min_time where rank_time = 1;

+--------+------+------+------+------+-------------+----------+
| source | td1  | ts2  | td2  | ts3  | destination | add_time |
+--------+------+------+------+------+-------------+----------+
| CHN    | HYD  | HYD  | BGL  | BGL  | NDL         | 05:00:00 |
+--------+------+------+------+------+-------------+----------+
1 row in set (0.00 sec)

		select source,td1,ts2,td2,ts3,destination,add_time from (
		select source,td1,ts2,td2,ts3,destination,add_time,dense_rank() over(partition by source,destination order by add_time) as rank_time from(
		select source,td1,ts2,td2,ts3,destination,addtime(addtime(time1,time2),time3) as add_time from (
		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		case when t1.trip_start_time < t1.trip_end_time then timediff(t1.trip_end_time,t1.trip_start_time) else timediff('24:00:00',timediff					(t1.trip_start_time,t1.trip_end_time))	end as time1,
		case when t2.trip_start_time < t2.trip_end_time then timediff(t2.trip_end_time,t2.trip_start_time) else timediff('24:00:00',timediff					(t2.trip_start_time,t2.trip_end_time))	end as time2,
		case when t3.trip_start_time < t3.trip_end_time then timediff(t3.trip_end_time,t3.trip_start_time) else timediff('24:00:00',timediff					(t3.trip_start_time,t3.trip_end_time))	end as time3
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source 
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL') 
		as time ) as min_time ) as out_min where rank_time = 1;

3)Fetch itinerary details from CHN to NDL which have less dynamic pricing(assume current_date = 'Sunday')

		select source,td1,ts2,td2,ts3,destination,cost from (
		select source,td1,ts2,td2,ts3,destination,cost,dense_rank() over(partition by source,destination order by cost) as rank_time from(
		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		t3.trip_cost+t2.trip_cost+t1.trip_cost as cost
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source 
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL' and t1.dynamic_fare='Y' and t2.dynamic_fare='Y' and t3.dynamic_fare='Y') 
		as time ) as min_time where rank_time = 1;

+--------+------+------+------+------+-------------+-------+
| source | td1  | ts2  | td2  | ts3  | destination | cost  |
+--------+------+------+------+------+-------------+-------+
| CHN    | BGL  | BGL  | MUM  | MUM  | NDL         | 14700 |
+--------+------+------+------+------+-------------+-------+
1 row in set (0.00 sec)

4)Fetch itinerary details from CHN to NDL which happens on same day

		select source,td1,ts2,td2,ts3,destination,add_time from(
		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		addtime(addtime(timediff(t1.trip_end_time,t1.trip_start_time),timediff(t2.trip_end_time,t2.trip_start_time)),timediff							(t3.trip_end_time,t3.trip_start_time)) as add_time 
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source 
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL') 
		as t where add_time>0;

+--------+------+------+------+------+-------------+----------+
| source | td1  | ts2  | td2  | ts3  | destination | add_time |
+--------+------+------+------+------+-------------+----------+
| CHN    | HYD  | HYD  | BGL  | BGL  | NDL         | 05:00:00 |
+--------+------+------+------+------+-------------+----------+
1 row in set (0.00 sec)

		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		addtime(addtime(abs(timediff(t1.trip_end_time,t1.trip_start_time)),abs(timediff(t2.trip_end_time,t2.trip_start_time))),abs(timediff					(t3.trip_end_time,t3.trip_start_time))) as add_time 
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL';

5)Fetch itinerary details from CHN to NDL which have mimum wait time at transit

		select source,td1,ts2,td2,ts3,destination,add_time from (
		select source,td1,ts2,td2,ts3,destination,add_time,dense_rank() over(partition by source,destination order by add_time) as rank_time from(
		select  t1.trip_source source,t1.trip_dest td1,
		t2.trip_source ts2,t2.trip_dest td2,
		t3.trip_source ts3,t3.trip_dest destination,
		addtime(abs(timediff(t1.trip_end_time,t2.trip_start_time)),abs(timediff(t2.trip_end_time,t3.trip_start_time))) as add_time 
		from trip t1 join trip t2 on t1.trip_dest=t2.trip_source 
		join trip t3 on t2.trip_dest=t3.trip_source 
		where t1.trip_source='CHN' and t3.trip_dest='NDL') 
		as t ) min_wait where rank_time = 1;

    -> as t ) min_wait where rank_time = 1;
+--------+------+------+------+------+-------------+----------+
| source | td1  | ts2  | td2  | ts3  | destination | add_time |
+--------+------+------+------+------+-------------+----------+
| CHN    | BGL  | BGL  | MUM  | MUM  | NDL         | 06:20:00 |
+--------+------+------+------+------+-------------+----------+
1 row in set (0.00 sec)

6)Fetch return itinerary details from NDL to CHN with mimum transits

select ts1,td1,ts2,td2,ts3,td3 from (
select ts1,td1,ts2,td2,ts3,td3,dense_rank() over(order by count) as rank_count from (
select ts1,td1,ts2,td2,ts3,td3,
case when td2 is null and ts3 is null then 0 
when td2 is not null and ts3 is null then 1 
when td2 is not null and ts3 is not null then 2 end as count from (
select distinct t1.trip_source ts1,t1.trip_dest td1,
t2.trip_source ts2,t2.trip_dest td2,
case when t2.trip_dest='CHN' then NULL else t3.trip_source end as ts3,
case when t2.trip_dest='CHN' then NULL else t3.trip_dest end as td3
from trip t1 join trip t2 on t1.trip_dest=t2.trip_source join trip t3 on t2.trip_dest=t3.trip_source 
where (t1.trip_source = 'NDL' and t3.trip_dest='CHN') or (t1.trip_source='NDL' and t2.trip_dest='CHN') )as mid ) as mid_count ) final where rank_count=1;

+------+------+------+------+------+------+
| ts1  | td1  | ts2  | td2  | ts3  | td3  |
+------+------+------+------+------+------+
| NDL  | HYD  | HYD  | CHN  | NULL | NULL |
+------+------+------+------+------+------+
1 row in set (0.00 sec)

7)Fetch itinerary details from CHN to BGL before 11 AM

select ts1,td1,st1,et1,ts2,td2,st2,et2 from (
select distinct t1.trip_source ts1,t1.trip_dest td1,t1.trip_start_time st1,t1.trip_end_time et1,
case when t1.trip_dest='BGL' then "NULL" else t2.trip_source end as ts2,
case when t1.trip_dest='BGL' then "NULL" else t2.trip_dest end as td2,
case when t1.trip_dest='BGL' then "00:00:00" else t2.trip_start_time end as st2,
case when t1.trip_dest='BGL' then "00:00:00" else t2.trip_end_time end as et2
from trip t1 join trip t2 on t1.trip_dest=t2.trip_source  
where (t1.trip_source = 'CHN' and t1.trip_dest='BGL') or (t1.trip_source='CHN' and t2.trip_dest='BGL') ) as time where st1 < '11:00:00';

+------+------+----------+----------+------+------+----------+----------+
| ts1  | td1  | st1      | et1      | ts2  | td2  | st2      | et2      |
+------+------+----------+----------+------+------+----------+----------+
| CHN  | HYD  | 09:45:00 | 11:10:00 | HYD  | BGL  | 12:20:00 | 13:25:00 |
+------+------+----------+----------+------+------+----------+----------+
1 row in set (0.00 sec)

select ts1,td1,st1,et1,ts2,td2,st2,et2 from (
select distinct t1.trip_source ts1,t1.trip_dest td1,t1.trip_start_time st1,t1.trip_end_time et1,
case when t1.trip_dest='BGL' then "NULL" else t2.trip_source end as ts2,
case when t1.trip_dest='BGL' then "NULL" else t2.trip_dest end as td2,
case when t1.trip_dest='BGL' then "00:00:00" else t2.trip_start_time end as st2,
case when t1.trip_dest='BGL' then "00:00:00" else t2.trip_end_time end as et2
from trip t1 join trip t2 on t1.trip_dest=t2.trip_source  
where (t1.trip_source = 'CHN' and t1.trip_dest='BGL') or (t1.trip_source='CHN' and t2.trip_dest='BGL') 
) as time where st1 < '11:00:00' and st2 < '11:00:00';
Empty set (0.00 sec)

8)Fetch return itinerary details from NDL to CHN which happens on same day or which has less travel time

select ts1,td1,ts2,td2,ts3,td3,time,add_time from (
select ts1,td1,ts2,td2,ts3,td3,time,add_time,dense_rank() over(order by add_time) rank_time from (
select ts1,td1,ts2,td2,ts3,td3,time,addtime(addtime(time1,time2),time3) as add_time from (
select ts1,td1,ts2,td2,ts3,td3,case when ts3='NULL' then timediff(et2,st1)  else timediff(et3,st1) end as time,
case when st1 < et1 then timediff(et1,st1) else timediff('24:00:00',timediff(st1,et1))	end as time1,
case when st2 < et2 then timediff(et2,st2) else timediff('24:00:00',timediff(st2,et2))	end as time2,
case when td2='CHN' then "00:00:00" when st3 < et3 then timediff(et3,st3) else timediff('24:00:00',timediff(st3,et3)) end as time3 from (
select distinct t1.trip_source ts1,t1.trip_dest td1,t1.trip_start_time st1,t1.trip_end_time et1,
t2.trip_source ts2,t2.trip_dest td2,t2.trip_start_time st2,t2.trip_end_time et2,
case when t2.trip_dest='CHN' then "NULL" else t3.trip_source end as ts3,
case when t2.trip_dest='CHN' then "NULL" else t3.trip_dest end as td3,
case when t2.trip_dest='CHN' then "00:00:00" else t3.trip_start_time end as st3,
case when t2.trip_dest='CHN' then "00:00:00" else t3.trip_end_time end as et3
from trip t1 join trip t2 on t1.trip_dest=t2.trip_source join trip t3 on t2.trip_dest=t3.trip_source 
where (t1.trip_source = 'NDL' and t3.trip_dest='CHN') or (t1.trip_source='NDL' and t2.trip_dest='CHN') 
) as time 
) as mid1
) as mid
) as final where time > 0 or rank_time = 1;

+------+------+------+------+------+------+-----------------+-----------------+
| ts1  | td1  | ts2  | td2  | ts3  | td3  | time            | add_time        |
+------+------+------+------+------+------+-----------------+-----------------+
| NDL  | HYD  | HYD  | CHN  | NULL | NULL | 10:55:00.000000 | 04:10:00.000000 |
+------+------+------+------+------+------+-----------------+-----------------+
1 row in set (0.00 sec)

9)Fetch trip details which have less travel time

mysql> select trip_source,trip_dest from (select trip_id,trip_source,trip_dest,dense_rank() over(order by t_time) rank_time from(select trip_id,trip_source,trip_dest,time(abs(timediff(trip_end_time,trip_start_time))) as t_time from trip ) time ) time_min where rank_time=1;
+-------------+-----------+
| trip_source | trip_dest |
+-------------+-----------+
| BGL         | MUM       |
+-------------+-----------+
1 row in set (0.00 sec)

10)Fetch trip details which have high travel time and no dynamic pricing

mysql> select trip_source,trip_dest from (select trip_id,trip_source,trip_dest,dense_rank() over(order by t_time desc) rank_time from(select trip_id,trip_source,trip_dest,time(abs(timediff(trip_end_time,trip_start_time))) as t_time from trip where dynamic_fare='N') time ) time_min where rank_time=1;
+-------------+-----------+
| trip_source | trip_dest |
+-------------+-----------+
| MUM         | BGL       |
+-------------+-----------+
1 row in set (0.00 sec)


SET - 3

1)Fetch rows which have hottest month per city with highest rainfall

mysql> select stats_id,city,month,year,temp_fare,rain_inch from (select stats_id,city,month,year,temp_fare,rain_inch,dense_rank() over(partition by city order by temp_fare desc) as rank_temp,dense_rank() over(partition by city order by rain_inch desc) as rank_rain from stats s join station s1 on s.stats_id=s1.station_id) as rain_temp where rank_temp=1 or rank_rain=1;
+----------+---------+-------+------+-----------+-----------+
| stats_id | city    | month | year | temp_fare | rain_inch |
+----------+---------+-------+------+-----------+-----------+
|       66 | Caribou |     7 | 2010 |      65.8 |      4.52 |
|       44 | Denver  |     9 | 2010 |      27.2 |      3.45 |
|       44 | Denver  |     6 | 2010 |      74.8 |      2.11 |
|       13 | Phoenix |     9 | 2010 |     100.3 |     10.34 |
+----------+---------+-------+------+-----------+-----------+
4 rows in set (0.00 sec)

2)Fetch and display rows with Station_ID, City, State, Month, Year and temp(in Celcius), rainfall (in cm)

mysql> select s.stats_id,s1.city,s1.state,s.month,s.year,round((rain_inch * 03937),2) as rain_cm,round(((temp_fare-32)*(5/9)),2) as temp_cel from stats s join station s1 on s.stats_id=s1.station_id;
+----------+---------+-------+-------+------+----------+----------+
| stats_id | city    | state | month | year | rain_cm  | temp_cel |
+----------+---------+-------+-------+------+----------+----------+
|       13 | Phoenix | AZ    |     1 | 2010 |  1220.47 |    14.11 |
|       13 | Phoenix | AZ    |     5 | 2010 | 20275.55 |    33.17 |
|       13 | Phoenix | AZ    |    12 | 2010 | 32834.58 |   -10.78 |
|       13 | Phoenix | AZ    |     9 | 2010 | 40708.58 |    37.94 |
|       44 | Denver  | CO    |     9 | 2010 | 13582.65 |    -2.67 |
|       44 | Denver  | CO    |     2 | 2010 |   708.66 |    -2.61 |
|       44 | Denver  | CO    |     6 | 2010 |  8307.07 |    23.78 |
|       66 | Caribou | ME    |     3 | 2010 |  8267.70 |   -14.06 |
|       66 | Caribou | ME    |     7 | 2010 | 17795.24 |    18.78 |
+----------+---------+-------+-------+------+----------+----------+
9 rows in set (0.07 sec)

3)Display all rows for states on all quarters. If a state do not have any quarter information, default Temp in Celcius and rain in cms based on average for the year

mysql> select stats_id,month,year,temp_fare,rain_inch,avg(case when status='less' then rain_inch end) over(partition by stats_id) as avrg from (select stats_id,month,year,temp_fare,rain_inch,count,case when count<4 then "less" else "more" end as status from (select stats_id,month,year,temp_fare,rain_inch,count(*) over(partition by stats_id)as count from stats) as l_m) as m_l;
+----------+-------+------+-----------+-----------+--------------------+
| stats_id | month | year | temp_fare | rain_inch | avrg               |
+----------+-------+------+-----------+-----------+--------------------+
|       13 |     1 | 2010 |      57.4 |      0.31 |               NULL |
|       13 |     5 | 2010 |      91.7 |      5.15 |               NULL |
|       13 |    12 | 2010 |      12.6 |      8.34 |               NULL |
|       13 |     9 | 2010 |     100.3 |     10.34 |               NULL |
|       44 |     9 | 2010 |      27.2 |      3.45 | 1.9133333166440327 |
|       44 |     2 | 2010 |      27.3 |      0.18 | 1.9133333166440327 |
|       44 |     6 | 2010 |      74.8 |      2.11 | 1.9133333166440327 |
|       66 |     3 | 2010 |       6.7 |       2.1 |  3.309999942779541 |
|       66 |     7 | 2010 |      65.8 |      4.52 |  3.309999942779541 |
+----------+-------+------+-----------+-----------+--------------------+
9 rows in set (0.00 sec)

4)Which state has coldest month and highest rainfall compared to average per year

select city,state,rain_inch,avg_rain,avg_temp from (select city,state,temp_fare,rain_inch,avg_rain,avg_temp,dense_rank() over(partition by state order by avg_rain desc,avg_temp desc) rank_avg from (select city,state,temp_fare,rain_inch,avg(rain_inch) over() as avg_rain,avg(temp_fare) over() as avg_temp from stats s join station s1 on s.stats_id=s1.station_id) as rain_temp where avg_rain<rain_inch and avg_temp > temp_fare) as max_rain where rank_avg=1;

mysql> select city,state,rain_inch,avg_rain,avg_temp from (select city,state,temp_fare,rain_inch,avg_rain,avg_temp,dense_rank() over(order by avg_rain desc,avg_temp desc) rank_avg from (select city,state,temp_fare,rain_inch,avg(rain_inch) over() as avg_rain,avg(temp_fare) over() as avg_temp from stats s join station s1 on s.stats_id=s1.station_id) as rain_temp where avg_rain<rain_inch and avg_temp > temp_fare) as max_rain where rank_avg=1;
+---------+-------+-----------+-------------------+------------------+
| city    | state | rain_inch | avg_rain          | avg_temp         |
+---------+-------+-----------+-------------------+------------------+
| Phoenix | AZ    |      8.34 | 4.055555582046509 | 51.5333342022366 |
+---------+-------+-----------+-------------------+------------------+
1 row in set (0.00 sec)

5)Which city had maximum rainfall below average . Display city, state, rainfall, average information
mysql> select city,state,rain_inch,avg_rain from (select city,state,rain_inch,avg_rain,dense_rank() over(partition by city order by avg_rain desc) rank_avg from (select city,state,rain_inch,avg(rain_inch) over(partition by city) as avg_rain from stats s join station s1 on s.stats_id=s1.station_id) as rain where avg_rain>rain_inch) as max_rain where rank_avg=1;
+---------+-------+-----------+--------------------+
| city    | state | rain_inch | avg_rain           |
+---------+-------+-----------+--------------------+
| Caribou | ME    |       2.1 |  3.309999942779541 |
| Denver  | CO    |      0.18 | 1.9133333166440327 |
| Phoenix | AZ    |      0.31 |   6.03500010073185 |
| Phoenix | AZ    |      5.15 |   6.03500010073185 |
+---------+-------+-----------+--------------------+
4 rows in set (0.00 sec)

mysql> select city,state,rain_inch,avg_rain from (select city,state,rain_inch,avg_rain,dense_rank() over(partition by city order by rain_inch desc) rank_avg from (select city,state,rain_inch,avg(rain_inch) over() as avg_rain from stats s join station s1 on s.stats_id=s1.station_id) as rain where avg_rain>rain_inch) as max_rain where rank_avg=1;
+---------+-------+-----------+-------------------+
| city    | state | rain_inch | avg_rain          |
+---------+-------+-----------+-------------------+
| Caribou | ME    |       2.1 | 4.055555582046509 |
| Denver  | CO    |      3.45 | 4.055555582046509 |
| Phoenix | AZ    |      0.31 | 4.055555582046509 |
+---------+-------+-----------+-------------------+
3 rows in set (0.00 sec)

mysql> select city,state,rain_inch,avg_rain from (select city,state,rain_inch,avg_rain,dense_rank() over(order by rain_inch desc) rank_avg from (select city,state,rain_inch,avg(rain_inch) over() as avg_rain from stats s join station s1 on s.stats_id=s1.station_id) as rain where avg_rain>rain_inch) as max_rain where rank_avg=1;
+--------+-------+-----------+-------------------+
| city   | state | rain_inch | avg_rain          |
+--------+-------+-----------+-------------------+
| Denver | CO    |      3.45 | 4.055555582046509 |
+--------+-------+-----------+-------------------+
1 row in set (0.00 sec)

6)Which city had second  coldest month when compared to national average

mysql> select stats_id,month,temp_fare from (select stats_id,month,temp_fare,avg_temp,dense_rank() over(order by temp_fare) as min_temp from (select stats_id,month,temp_fare,avg(temp_fare) over() avg_temp from stats s join station s1 on s.stats_id=s1.station_id) as avg_temp where temp_fare < avg_temp ) as temp where min_temp = 2;
+----------+-------+-----------+
| stats_id | month | temp_fare |
+----------+-------+-----------+
|       13 |    12 |      12.6 |
+----------+-------+-----------+
1 row in set (0.00 sec)

7)create a view based on question#3. If you query view, you should have resultset matching with question #3
8)Report stations which had temperature difference < 5 C  or difference > 20 C in subsequent quarters

select stats_id,city,state,month,temp_fare,rain_inch from (
select stats_id,city,state,month,temp_fare,rain_inch,case when temp_celcius < lead_temp then lead_temp-temp_celcius else temp_celcius-lead_temp end as diff_temp from (select stats_id,city,state,month,temp_fare,rain_inch,temp_celcius,round(lead(temp_celcius) over(partition by stats_id order by month),2) lead_temp from ( select stats_id,city,state,month,temp_fare,((temp_fare-32) * (5/9)) temp_celcius,rain_inch from stats s join station s1 on s.stats_id=s1.station_id) as temp ) as lead_val ) as final where diff_temp < 5 or diff_temp > 20;

+----------+---------+-------+-------+-----------+-----------+
| stats_id | city    | state | month | temp_fare | rain_inch |
+----------+---------+-------+-------+-----------+-----------+
|       13 | Phoenix | AZ    |     5 |      91.7 |      5.15 |
|       13 | Phoenix | AZ    |     9 |     100.3 |     10.34 |
|       44 | Denver  | CO    |     2 |      27.3 |      0.18 |
|       44 | Denver  | CO    |     6 |      74.8 |      2.11 |
|       66 | Caribou | ME    |     3 |       6.7 |       2.1 |
+----------+---------+-------+-------+-----------+-----------+
5 rows in set (0.00 sec)


9)Report stations which obsevered temperatures less than 0(in celcius)

mysql> select stats_id,city,state from stats s join station s1 on s.stats_id=s1.station_id where ((temp_fare-32)*(5/9)) < 0;
+----------+---------+-------+
| stats_id | city    | state |
+----------+---------+-------+
|       13 | Phoenix | AZ    |
|       44 | Denver  | CO    |
|       44 | Denver  | CO    |
|       66 | Caribou | ME    |
+----------+---------+-------+
4 rows in set (0.00 sec)

10)Display state information and number of times when rainfall is greater than national average

mysql> select state,city,count(city) count from(select stats_id,state,city,rain_inch,avg_rain from (select stats_id,state,city,rain_inch,avg(rain_inch) over() as avg_rain from station s join stats s1 on s1.stats_id=s.station_id) as rain where rain_inch > avg_rain) as count_city group by state,city;
+-------+---------+-------+
| state | city    | count |
+-------+---------+-------+
| AZ    | Phoenix |     3 |
| ME    | Caribou |     1 |
+-------+---------+-------+
2 rows in set (0.00 sec)
