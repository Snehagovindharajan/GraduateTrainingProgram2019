create database highschool;

use highschool;

create table highschooler(id integer(4) primary key,name varchar(20),grade integer(3));

create table friend (id1 integer(4),id2 integer(4),foreign key(id1) references highschooler(id),foreign key(id2) references highschooler(id));

create table likes(id1 integer(4),id2 integer(4),foreign key(id1) references highschooler(id),foreign key(id2) references highschooler(id));

insert into highschooler values(1510, 'Jordan', 9);
insert into highschooler values(1689, 'Gabriel', 9);
insert into highschooler values(1381, 'Tiffany', 9);
insert into highschooler values(1709, 'Cassandra', 9);
insert into highschooler values(1101, 'Haley', 10);
insert into highschooler values(1782, 'Andrew', 10);
insert into highschooler values(1468, 'Kris', 10);
insert into highschooler values(1641, 'Brittany', 10);
insert into highschooler values(1247, 'Alexis', 11);
insert into highschooler values(1316, 'Austin', 11);
insert into highschooler values(1911, 'Gabriel', 11);
insert into highschooler values(1501, 'Jessica', 11);
insert into highschooler values(1304, 'Jordan', 12);
insert into highschooler values(1025, 'John', 12);
insert into highschooler values(1934, 'Kyle', 12);
insert into highschooler values(1661, 'Logan', 12);

mysql> desc highschooler;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| id    | int(4)      | NO   | PRI | NULL    |       |
| name  | varchar(20) | YES  |     | NULL    |       |
| grade | int(3)      | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> select * from highschooler;
+------+-----------+-------+
| id   | name      | grade |
+------+-----------+-------+
| 1025 | John      |    12 |
| 1101 | Haley     |    10 |
| 1247 | Alexis    |    11 |
| 1304 | Jordan    |    12 |
| 1316 | Austin    |    11 |
| 1381 | Tiffany   |     9 |
| 1468 | Kris      |    10 |
| 1501 | Jessica   |    11 |
| 1510 | Jordan    |     9 |
| 1641 | Brittany  |    10 |
| 1661 | Logan     |    12 |
| 1689 | Gabriel   |     9 |
| 1709 | Cassandra |     9 |
| 1782 | Andrew    |    10 |
| 1911 | Gabriel   |    11 |
| 1934 | Kyle      |    12 |
+------+-----------+-------+
16 rows in set (0.00 sec)


insert into friend values(1510, 1381);
insert into friend values(1510, 1689);
insert into friend values(1689, 1709);
insert into friend values(1381, 1247);
insert into friend values(1709, 1247);
insert into friend values(1689, 1782);
insert into friend values(1782, 1468);
insert into friend values(1782, 1316);
insert into friend values(1782, 1304);
insert into friend values(1468, 1101);
insert into friend values(1468, 1641);
insert into friend values(1101, 1641);
insert into friend values(1247, 1911);
insert into friend values(1247, 1501);
insert into friend values(1911, 1501);
insert into friend values(1501, 1934);
insert into friend values(1316, 1934);
insert into friend values(1934, 1304);
insert into friend values(1304, 1661);
insert into friend values(1661, 1025);
insert into friend values(1381, 1510);
insert into friend values(1689, 1510);
insert into friend values(1709, 1689);
insert into friend values(1247, 1381);
insert into friend values(1247, 1709);
insert into friend values(1782, 1689);
insert into friend values(1468, 1782);
insert into friend values(1316, 1782);
insert into friend values(1304, 1782);
insert into friend values(1101, 1468);
insert into friend values(1641, 1468);
insert into friend values(1641, 1101);
insert into friend values(1911, 1247);
insert into friend values(1501, 1247);
insert into friend values(1501, 1911);
insert into friend values(1934, 1501);
insert into friend values(1934, 1316);
insert into friend values(1304, 1934);
insert into friend values(1661, 1304);
insert into friend values(1025, 1661);

mysql> desc friend;
+-------+--------+------+-----+---------+-------+
| Field | Type   | Null | Key | Default | Extra |
+-------+--------+------+-----+---------+-------+
| id1   | int(4) | YES  | MUL | NULL    |       |
| id2   | int(4) | YES  | MUL | NULL    |       |
+-------+--------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> select * from friend;
+------+------+
| id1  | id2  |
+------+------+
| 1510 | 1381 |
| 1510 | 1689 |
| 1689 | 1709 |
| 1381 | 1247 |
| 1709 | 1247 |
| 1689 | 1782 |
| 1782 | 1468 |
| 1782 | 1316 |
| 1782 | 1304 |
| 1468 | 1101 |
| 1468 | 1641 |
| 1101 | 1641 |
| 1247 | 1911 |
| 1247 | 1501 |
| 1911 | 1501 |
| 1501 | 1934 |
| 1316 | 1934 |
| 1934 | 1304 |
| 1304 | 1661 |
| 1661 | 1025 |
| 1381 | 1510 |
| 1689 | 1510 |
| 1709 | 1689 |
| 1247 | 1381 |
| 1247 | 1709 |
| 1782 | 1689 |
| 1468 | 1782 |
| 1316 | 1782 |
| 1304 | 1782 |
| 1101 | 1468 |
| 1641 | 1468 |
| 1641 | 1101 |
| 1911 | 1247 |
| 1501 | 1247 |
| 1501 | 1911 |
| 1934 | 1501 |
| 1934 | 1316 |
| 1304 | 1934 |
| 1661 | 1304 |
| 1025 | 1661 |
+------+------+
40 rows in set (0.00 sec)

insert into likes values(1689, 1709);
insert into likes values(1709, 1689);
insert into likes values(1782, 1709);
insert into likes values(1911, 1247);
insert into likes values(1247, 1468);
insert into likes values(1641, 1468);
insert into likes values(1316, 1304);
insert into likes values(1501, 1934);
insert into likes values(1934, 1501);
insert into likes values(1025, 1101);

mysql> desc likes;
+-------+--------+------+-----+---------+-------+
| Field | Type   | Null | Key | Default | Extra |
+-------+--------+------+-----+---------+-------+
| id1   | int(4) | YES  | MUL | NULL    |       |
| id2   | int(4) | YES  | MUL | NULL    |       |
+-------+--------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> select * from likes;
+------+------+
| id1  | id2  |
+------+------+
| 1689 | 1709 |
| 1709 | 1689 |
| 1782 | 1709 |
| 1911 | 1247 |
| 1247 | 1468 |
| 1641 | 1468 |
| 1316 | 1304 |
| 1501 | 1934 |
| 1934 | 1501 |
| 1025 | 1101 |
+------+------+
10 rows in set (0.00 sec)

# ProblemSet04 - Questions

1. Find the names of all students who are friends with someone named Gabriel. (1 point possible)

mysql> select name from highschooler where id in (select f.id2 from friend f join highschooler h on f.id1=h.id where lower(h.name)='gabriel');
+-----------+
| name      |
+-----------+
| Alexis    |
| Jessica   |
| Jordan    |
| Cassandra |
| Andrew    |
+-----------+
5 rows in set (0.00 sec)

2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. (1 point possible)

3. For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. (1 point possible)

mysql> select name , grade from highschooler where id in (select a.id1 from likes a,likes b where a.id1=b.id2 and a.id2=b.id1);
+-----------+-------+
| name      | grade |
+-----------+-------+
| Gabriel   |     9 |
| Cassandra |     9 |
| Jessica   |    11 |
| Kyle      |    12 |
+-----------+-------+
4 rows in set (0.07 sec)

4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. (1 point possible)

mysql> select name,grade from highschooler where id not in ( select id1 from likes) or id not in (select id2 from likes) order by grade,name;
+----------+-------+
| name     | grade |
+----------+-------+
| Jordan   |     9 |
| Tiffany  |     9 |
| Andrew   |    10 |
| Brittany |    10 |
| Haley    |    10 |
| Kris     |    10 |
| Austin   |    11 |
| Gabriel  |    11 |
| John     |    12 |
| Jordan   |    12 |
| Logan    |    12 |
+----------+-------+
11 rows in set (0.00 sec)

5. For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. (1 point possible)

mysql> select distinct name,grade from highschooler where id in (select a.id2 from likes a where a.id2 not in (select b.id1 from likes b));
+--------+-------+
| name   | grade |
+--------+-------+
| Haley  |    10 |
| Jordan |    12 |
| Kris   |    10 |
+--------+-------+
3 rows in set (0.30 sec)

select a.id2 from likes a , likes b where a.id2 not in b.id1;

6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. (1 point possible)

7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. (1 point possible)

8. Find the difference between the number of students in the school and the number of different first names. (1 point possible)

mysql> select count(*)-count(distinct name) from highschooler;
+-------------------------------+
| count(*)-count(distinct name) |
+-------------------------------+
|                             2 |
+-------------------------------+
1 row in set (0.00 sec)

9. Find the name and grade of all students who are liked by more than one other student. (1 point possible)

mysql> select name,grade from highschooler where id in (select id2 from likes group by id2 having count(id1)>1);
+-----------+-------+
| name      | grade |
+-----------+-------+
| Kris      |    10 |
| Cassandra |     9 |
+-----------+-------+
2 rows in set (0.00 sec)


10. For every situation where student A likes student B, but student B likes a different student C, return the names and grades of A, B, and C. (1 point possible)

11. Find those students for whom all of their friends are in different grades from themselves. Return the students' names and grades.(1 point possible)

12. What is the average number of friends per student? (Your result should be just one number.) (1 point possible)

mysql> select avg(count) from (select id1,count(id2) as count from friend group by id1) as avgcount;
+------------+
| avg(count) |
+------------+
|     2.5000 |
+------------+
1 row in set (0.00 sec)


13. Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. 

mysql> select count(id2) from friend where id1 in (select id from highschooler where lower(name)='cassandra');
+------------+
| count(id2) |
+------------+
|          2 |
+------------+
1 row in set (0.00 sec)

14. Find the name and grade of the student(s) with the greatest number of friends. (1 point possible)

mysql> select max(count) from (select count(id1) as count from friend group by id2)as maxcount;
+------------+
| max(count) |
+------------+
|          4 |
+------------+
1 row in set (0.00 sec)
