create table movie(mid integer primary key,title varchar(30),year integer,director varchar(30));

create table reviewer(rid integer primary key,name varchar(30));

create table rating(rid integer,mid integer,stars integer,rating_date date,constraint rid_fk foreign key(rid) references reviewer(rid),constraint mid_fk foreign key(mid) references movie(mid));


insert into movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into movie values(105, 'Titanic', 1997, 'James Cameron');
insert into movie (mid,title,year) values(106, 'Snow White', 1937);
insert into movie values(107, 'Avatar', 2009, 'James Cameron');
insert into movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

mysql> desc movie;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| mid      | int(11)     | NO   | PRI | NULL    |       |
| title    | varchar(30) | YES  |     | NULL    |       |
| year     | int(11)     | YES  |     | NULL    |       |
| director | varchar(30) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from movie;
+-----+-------------------------+------+------------------+
| mid | title                   | year | director         |
+-----+-------------------------+------+------------------+
| 101 | Gone with the Wind      | 1939 | Victor Fleming   |
| 102 | Star Wars               | 1977 | George Lucas     |
| 103 | The Sound of Music      | 1965 | Robert Wise      |
| 104 | E.T.                    | 1982 | Steven Spielberg |
| 105 | Titanic                 | 1997 | James Cameron    |
| 106 | Snow White              | 1937 | NULL             |
| 107 | Avatar                  | 2009 | James Cameron    |
| 108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+-----+-------------------------+------+------------------+
8 rows in set (0.00 sec)

insert into reviewer values(201, 'Sarah Martinez');
insert into reviewer values(202, 'Daniel Lewis');
insert into reviewer values(203, 'Brittany Harris');
insert into reviewer values(204, 'Mike Anderson');
insert into reviewer values(205, 'Chris Jackson');
insert into reviewer values(206, 'Elizabeth Thomas');
insert into reviewer values(207, 'James Cameron');
insert into reviewer values(208, 'Ashley White');

mysql> desc reviewer;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| rid   | int(11)     | NO   | PRI | NULL    |       |
| name  | varchar(30) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> select * from reviewer;
+-----+------------------+
| rid | name             |
+-----+------------------+
| 201 | Sarah Martinez   |
| 202 | Daniel Lewis     |
| 203 | Brittany Harris  |
| 204 | Mike Anderson    |
| 205 | Chris Jackson    |
| 206 | Elizabeth Thomas |
| 207 | James Cameron    |
| 208 | Ashley White     |
+-----+------------------+
8 rows in set (0.00 sec)


insert into rating values(201, 101, 2, '2011-01-22');
insert into rating values(201, 101, 4, '2011-01-27');
insert into rating (rid,mid,stars) values(202, 106, 4);
insert into rating values(203, 103, 2, '2011-01-20');
insert into rating values(203, 108, 4, '2011-01-12');
insert into rating values(203, 108, 2, '2011-01-30');
insert into rating values(204, 101, 3, '2011-01-09');
insert into rating values(205, 103, 3, '2011-01-27');
insert into rating values(205, 104, 2, '2011-01-22');
insert into rating (rid,mid,stars) values(205, 108, 4);
insert into rating values(206, 107, 3, '2011-01-15');
insert into rating values(206, 106, 5, '2011-01-19');
insert into rating values(207, 107, 5, '2011-01-20');
insert into rating values(208, 104, 3, '2011-01-02');

mysql> desc rating;
+-------------+---------+------+-----+---------+-------+
| Field       | Type    | Null | Key | Default | Extra |
+-------------+---------+------+-----+---------+-------+
| rid         | int(11) | YES  | MUL | NULL    |       |
| mid         | int(11) | YES  | MUL | NULL    |       |
| stars       | int(11) | YES  |     | NULL    |       |
| rating_date | date    | YES  |     | NULL    |       |
+-------------+---------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from rating;
+------+------+-------+-------------+
| rid  | mid  | stars | rating_date |
+------+------+-------+-------------+
|  201 |  101 |     2 | 2011-01-22  |
|  201 |  101 |     4 | 2011-01-27  |
|  202 |  106 |     4 | NULL        |
|  203 |  103 |     2 | 2011-01-20  |
|  203 |  108 |     4 | 2011-01-12  |
|  203 |  108 |     2 | 2011-01-30  |
|  204 |  101 |     3 | 2011-01-09  |
|  205 |  103 |     3 | 2011-01-27  |
|  205 |  104 |     2 | 2011-01-22  |
|  205 |  108 |     4 | NULL        |
|  206 |  107 |     3 | 2011-01-15  |
|  206 |  106 |     5 | 2011-01-19  |
|  207 |  107 |     5 | 2011-01-20  |
|  208 |  104 |     3 | 2011-01-02  |
+------+------+-------+-------------+
14 rows in set (0.00 sec)

1. Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> select title from movie where lower(director)='steven spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

mysql> select distinct year from movie m join rating r on m.mid=r.mid where stars between 4 and 5 order by year;
+------+
| year |
+------+
| 1937 |
| 1939 |
| 1981 |
| 2009 |
+------+
4 rows in set (0.00 sec)

3. Find the titles of all movies that have no ratings. (1 point possible)

mysql> select distinct title from movie where mid not in (select mid from rating); 
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.00 sec)

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

mysql> select name from reviewer view join rating rate on view.rid=rate.rid where rate.rating_date is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

mysql> select name,title,stars,rating_date from movie m join rating r on m.mid=r.mid join reviewer view on r.rid=view.rid order by name,title,stars;
+------------------+-------------------------+-------+-------------+
| name             | title                   | stars | rating_date |
+------------------+-------------------------+-------+-------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02  |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30  |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12  |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20  |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22  |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL        |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27  |
| Daniel Lewis     | Snow White              |     4 | NULL        |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15  |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19  |
| James Cameron    | Avatar                  |     5 | 2011-01-20  |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09  |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22  |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27  |
+------------------+-------------------------+-------+-------------+
14 rows in set (0.00 sec)


6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible) (doubt)

mysql> select name,view.rid from reviewer view join rating r on r.rid=view.rid group by view.name having count(r.mid) = 2 and avg(r.mid)=101;
+----------------+-----+
| name           | rid |
+----------------+-----+
| Sarah Martinez | 201 |
+----------------+-----+
1 row in set (0.00 sec)

mysql> select name,view.rid from reviewer view join rating r on r.rid=view.rid join rating r1 on r.rid=r1.rid where r.stars >r1.stars group by view.name having count(r.mid) = 2 and avg(r.mid)=101;
Empty set (0.00 sec)

mysql> select name,view.rid from reviewer view join rating r on r.rid=view.rid join rating r1 on r.rid=r1.rid where r.stars >r1.stars ;
+------------------+-----+
| name             | rid |
+------------------+-----+
| Sarah Martinez   | 201 |
| Brittany Harris  | 203 |
| Brittany Harris  | 203 |
| Chris Jackson    | 205 |
| Chris Jackson    | 205 |
| Chris Jackson    | 205 |
| Elizabeth Thomas | 206 |
+------------------+-----+
7 rows in set (0.00 sec)



7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

mysql> select title,max(stars) from movie m1 join rating r1 on m1.mid=r1.mid where stars in (select max(r.stars) from rating r join movie m on r.mid = m.mid group by m.title) group by title order by title;
+-------------------------+------------+
| title                   | max(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the Wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The Sound of Music      |          3 |
+-------------------------+------------+
6 rows in set (0.00 sec)

8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> select m.title,(max(stars)-min(stars)) as ratingspeed from rating view join movie m on m.mid=view.mid group by view.mid order by ratingspeed desc,title;
+-------------------------+-------------+
| title                   | ratingspeed |
+-------------------------+-------------+
| Avatar                  |           2 |
| Gone with the Wind      |           2 |
| Raiders of the Lost Ark |           2 |
| E.T.                    |           1 |
| Snow White              |           1 |
| The Sound of Music      |           1 |
+-------------------------+-------------+
6 rows in set (0.00 sec)

9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible) (doubt)

mysql> (select avg(mystar) average from (select m.title,avg(stars) as mystar from rating r join movie m on m.mid=r.mid where year < 1980 group by r.mid) as myavg1);
+-------------+
| avg(mystar) |
+-------------+
|  3.33333333 |
+-------------+
1 row in set (0.00 sec)

mysql> select avg(mystars) from (select m.title,avg(stars) as mystars from rating r join movie m on m.mid=r.mid where year > 1980 group by r.mid) as myavg2;
+--------------+
| avg(mystars) |
+--------------+
|   3.27776667 |
+--------------+
1 row in set (0.00 sec)

mysql> select answer.max-answer1.min from ((select avg(mystar) max from (select m.title,avg(stars) as mystar from rating r join movie m on m.mid=r.mid where year < 1980 group by r.mid) as myavg1) as answer , (select avg(mystars) min from (select m.title,avg(stars) as mystars from rating r join movie m on m.mid=r.mid where year > 1980 group by r.mid) as myavg2) as answer1);
+------------------------+
| answer.max-answer1.min |
+------------------------+
|             0.05556666 |
+------------------------+
1 row in set (0.00 sec)

10. Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

mysql> select  distinct view.name from reviewer view join rating r on view.rid=r.rid join movie m on m.mid=r.mid where lower(m.title)='gone with the wind';
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.06 sec)
 
11. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select view.name from reviewer view join rating r on view.rid=r.rid join movie m on m.mid=r.mid where lower(m.director)=lower(view.name);
+---------------+
| name          |
+---------------+
| James Cameron |
+---------------+
1 row in set (0.00 sec)

12. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible) (doubt)

mysql> select name,title from reviewer,movie order by name,title;
+------------------+-------------------------+
| name             | title                   |
+------------------+-------------------------+
| Ashley White     | Avatar                  |
| Ashley White     | E.T.                    |
| Ashley White     | Gone with the Wind      |
| Ashley White     | Raiders of the Lost Ark |
| Ashley White     | Snow White              |
| Ashley White     | Star Wars               |
| Ashley White     | The Sound of Music      |
| Ashley White     | Titanic                 |
| Brittany Harris  | Avatar                  |
| Brittany Harris  | E.T.                    |
| Brittany Harris  | Gone with the Wind      |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | Snow White              |
| Brittany Harris  | Star Wars               |
| Brittany Harris  | The Sound of Music      |
| Brittany Harris  | Titanic                 |
| Chris Jackson    | Avatar                  |
| Chris Jackson    | E.T.                    |
| Chris Jackson    | Gone with the Wind      |
| Chris Jackson    | Raiders of the Lost Ark |
| Chris Jackson    | Snow White              |
| Chris Jackson    | Star Wars               |
| Chris Jackson    | The Sound of Music      |
| Chris Jackson    | Titanic                 |
| Daniel Lewis     | Avatar                  |
| Daniel Lewis     | E.T.                    |
| Daniel Lewis     | Gone with the Wind      |
| Daniel Lewis     | Raiders of the Lost Ark |
| Daniel Lewis     | Snow White              |
| Daniel Lewis     | Star Wars               |
| Daniel Lewis     | The Sound of Music      |
| Daniel Lewis     | Titanic                 |
| Elizabeth Thomas | Avatar                  |
| Elizabeth Thomas | E.T.                    |
| Elizabeth Thomas | Gone with the Wind      |
| Elizabeth Thomas | Raiders of the Lost Ark |
| Elizabeth Thomas | Snow White              |
| Elizabeth Thomas | Star Wars               |
| Elizabeth Thomas | The Sound of Music      |
| Elizabeth Thomas | Titanic                 |
| James Cameron    | Avatar                  |
| James Cameron    | E.T.                    |
| James Cameron    | Gone with the Wind      |
| James Cameron    | Raiders of the Lost Ark |
| James Cameron    | Snow White              |
| James Cameron    | Star Wars               |
| James Cameron    | The Sound of Music      |
| James Cameron    | Titanic                 |
| Mike Anderson    | Avatar                  |
| Mike Anderson    | E.T.                    |
| Mike Anderson    | Gone with the Wind      |
| Mike Anderson    | Raiders of the Lost Ark |
| Mike Anderson    | Snow White              |
| Mike Anderson    | Star Wars               |
| Mike Anderson    | The Sound of Music      |
| Mike Anderson    | Titanic                 |
| Sarah Martinez   | Avatar                  |
| Sarah Martinez   | E.T.                    |
| Sarah Martinez   | Gone with the Wind      |
| Sarah Martinez   | Raiders of the Lost Ark |
| Sarah Martinez   | Snow White              |
| Sarah Martinez   | Star Wars               |
| Sarah Martinez   | The Sound of Music      |
| Sarah Martinez   | Titanic                 |
+------------------+-------------------------+
64 rows in set (0.00 sec)

13. Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

mysql> select title from movie where mid not in (select mid from rating r join reviewer view on r.rid=view.rid where lower(name)='chris jackson');
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.00 sec)


14. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

mysql> select distinct name,mid from reviewer view join rating r on view.rid=r.rid order by mid,name;
+------------------+------+
| name             | mid  |
+------------------+------+
| Mike Anderson    |  101 |
| Sarah Martinez   |  101 |
| Brittany Harris  |  103 |
| Chris Jackson    |  103 |
| Ashley White     |  104 |
| Chris Jackson    |  104 |
| Daniel Lewis     |  106 |
| Elizabeth Thomas |  106 |
| Elizabeth Thomas |  107 |
| James Cameron    |  107 |
| Brittany Harris  |  108 |
| Chris Jackson    |  108 |
+------------------+------+
12 rows in set (0.00 sec)

15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select name,title,stars from reviewer view join rating r on view.rid=r.rid join movie m on m.mid=r.mid where stars in(select min(stars) from rating);
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the Wind      |     2 |
| Brittany Harris | The Sound of Music      |     2 |
| Brittany Harris | Raiders of the Lost Ark |     2 |
| Chris Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+
4 rows in set (0.00 sec)

16. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

mysql> select title,avg(stars) as average from rating r join movie m on r.mid=m.mid group by title order by average,title;
+-------------------------+---------+
| title                   | average |
+-------------------------+---------+
| E.T.                    |  2.5000 |
| The Sound of Music      |  2.5000 |
| Gone with the Wind      |  3.0000 |
| Raiders of the Lost Ark |  3.3333 |
| Avatar                  |  4.0000 |
| Snow White              |  4.5000 |
+-------------------------+---------+
6 rows in set (0.00 sec)


17. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

mysql> select name from reviewer view join rating r on view.rid=r.rid group by r.rid having count(r.mid)>4;
Empty set (0.00 sec)

18. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select title from movie group by director having count(mid)>1;
+---------+
| title   |
+---------+
| E.T.    |
| Titanic |
+---------+
2 rows in set (0.00 sec)

19. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible) (doubt)

mysql> select title,avg(stars) from movie m join rating r on m.mid=r.mid group by title having avg(stars) in (select max(avgstars) from (select avg(stars) as avgstars from rating group by mid) as avgtable);
+-------------------------+------------+
| title                   | avg(stars) |
+-------------------------+------------+
| Gone with the Wind      |     3.0000 |
| Snow White              |     4.5000 |
| The Sound of Music      |     2.5000 |
| Raiders of the Lost Ark |     3.3333 |
| E.T.                    |     2.5000 |
| Avatar                  |     4.0000 |
+-------------------------+------------+
6 rows in set (0.00 sec)

20. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible) (doubt)

mysql> select title,avg(stars) from movie m join rating r on m.mid=r.mid having avg(stars) in (select min(avgstars) from (select avg(stars) as avgstars from rating group by mid) as avgtable) group by title;

mysql> select title,avg(stars) from movie m join rating r on m.mid=r.mid  group by title having avg(stars) in (select min(avgstars) from (select avg(stars) as avgstars from rating group by mid) as avgtable);
+-------------------------+------------+
| title                   | avg(stars) |
+-------------------------+------------+
| Gone with the Wind      |     3.0000 |
| The Sound of Music      |     2.5000 |
| E.T.                    |     2.5000 |
| Snow White              |     4.5000 |
| Avatar                  |     4.0000 |
| Raiders of the Lost Ark |     3.3333 |
+-------------------------+------------+
6 rows in set (0.20 sec)

21. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

mysql> select director,title,max(stars) from movie m join rating r on m.mid=r.mid where stars in (select max(stars) from rating r join movie m on r.mid=m.mid group by director) and director is not null group by director order by director;
+------------------+-------------------------+------------+
| director         | title                   | max(stars) |
+------------------+-------------------------+------------+
| James Cameron    | Avatar                  |          5 |
| Robert Wise      | The Sound of Music      |          3 |
| Steven Spielberg | Raiders of the Lost Ark |          4 |
| Victor Fleming   | Gone with the Wind      |          4 |
+------------------+-------------------------+------------+
4 rows in set (0.00 sec)

mysql> (select title,director,max(stars) from rating r join movie m on r.mid=m.mid where director is not null group by director order by director);
+-------------------------+------------------+------------+
| title                   | director         | max(stars) |
+-------------------------+------------------+------------+
| Avatar                  | James Cameron    |          5 |
| The Sound of Music      | Robert Wise      |          3 |
| Raiders of the Lost Ark | Steven Spielberg |          4 |
| Gone with the Wind      | Victor Fleming   |          4 |
+-------------------------+------------------+------------+
4 rows in set (0.00 sec)

